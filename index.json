[{"categories":["vscode","editors","workflow"],"contents":"Introduction If you need to write several times the same shortcodes or writable incantations, it might make sense to use snippets.\nSnippets are small fragments of code what can be inserted easily in your editor, using some keyword combination. In VSCode you can insert a snippet by typing the first characters and pressing Ctrl+Space.\nKeeping track of pending TODO\u0026rsquo;s I am so used to using Org-mode in emacs that I miss the chance to add TODO\u0026rsquo;s in any part of my documents. When I am writing new posts, I would love to to * TODO task, with the super simple org syntax. However, we are in markdown land and adding comments or tasks in the plain text is not that simple.\nAfter browsing Stack Overflow, it seems like the most cannonical way to add comments in Markdown, that won\u0026rsquo;t be rendered into the final document is:\n[//]: # \u0026#34;Comment\u0026#34; Warning! Note that there is a blank line after the comment!\nThere is an extension for VSCode that looks for the keywords TODO and FIXME in the current workdir and offers a plain list. So I decided to create a snippet to insert the TODO\u0026rsquo;s in a simple way in the markdown file that Hugo uses. It is super simple to create a snippet in VSCode (at least coming from Emacs YasSnippet land)\nHow to create a custom snippet in VSCode To create the custom snippet in VSCode, you just need to click File-\u0026gt; Preferences-\u0026gt; User Snippets. A menu will pop-up asking if you want to create a new snippet file or add your snippet to one of the existing languages already defined. I choose markdown file an added the following lines:\n\u0026#34;Add Markdown TODO Comment\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;add\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;[//]: # \\\u0026#34;TODO: $0 \\\u0026#34; \\n\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Add Markdown TODO Comment\u0026#34; } Breaking down the body, I am asking VSCode to insert the [//] symbol, followed by the hashtag, then a escaped double comma before the keyword TODO (followed by double dot) that marks the beginning of the comment. Then I mark where I would like my cursor to go after pasting the snippet by using $0. There is a closing double comma followed by the new line character.\nTo insert the snippet I just need to type add and press Ctrl+Space and I will get my new TODO inserted. To check all my TODOs I just need to open the command palette by pressing Ctrl+Shift+P and then choose the command list highlighted annotations . All my pending TODOs will be listed under the OUTPUT tab. And now, it is time to work on those TODO\u0026rsquo;s!!\nPhoto by Sonja Prein on Unsplash\n","date":"February 18, 2022","image":null,"permalink":"/blog/creating-custom-snippets-in-vscode/","title":"Create custom snippets in VSCode"},{"categories":["vscode","editors","workflow"],"contents":"Introduction I am a fan of customizable editors. Over the years, I have tried dozens of editors to create my content, posts, texts, etc. I have spent countless hours editing in emacs, editorial, drafts, scrivener and other less obscure WYSIWYG mainstream editors.\nBut I always hit a wall, once I need to tailor it to my actual needs for the moment, regardless an existing extension or configuration is available.\nMost of the editors live or die because of the communities that surround them. People create countless extensions and customizations to enable different use cases. But what happens if the existing solutions do not work for you?\nYou end up with a meta problem, a wicked problem that would be solved by creating your own extensions or doing your own customizations. You are no longer spending time writing text, but writing code to make it simpler to make it write text.\nAfter lots of observations, I would say there are two kinds of people: those who make the most of the tools they are given, ignoring any further customizations beyond the basics, and people that love to tinker their environment to the extreme. Tinkering is not a side effect, but a way to approaching any simple task.\nThe problem of meta-problems The most obvious concern of these meta problems, is that they deride your attention from your previous task to another boundless domain of expertise. Instead of writing in English, now you are writing in Javascript. Instead of writing your book, now you are making small improvements to your workflow everyday, while the book remains stagnant. It is the ultimate procastination trap!\nXKCD has created a few posts over the years, explaining the problem and offering a rationale about devoting time to these automation tasks.\n  You need to tackle the problem, if and only if it is something you do very often. So what is my current problem?\nCapturing images As I began writing this blog, I stuck into an old problem that I encountered at least twice when using emacs:\n How do I capture a segment of the screen and get it into my content as simply and fast as I can?\n This problem compounds if you use several operating systems and machines to write your content, as each might have some particular quirks. Nonetheless, there are several steps involved:\n Run a shortcut to capture an area of your screen. Switch to your editor or program Paste the content into the editor  If you are creating your own notes or documents, you can do these steps by hand and never look back. However, if you plan to publish the results in any meaningfull way, it doesn\u0026rsquo;t work that well. In my particular case, I work creating online courses, manuals, producing videos and now this blog too. What is the actual problem in each platform? Let\u0026rsquo;s say you want to publish an article or book and are using a Mac.\nExploring MacOSX workflow MacOSX offers a built-in tool to capture areas of your desktop easily. You can launch it pressing Cmd+Shift+4. It captures the area you select and save it on your desktop. Fortunately, newer versions allow you to change the default location. File format by default is “Captura de pantalla [fecha] a las [hora].png”. Once the capture is taken, a small thumbnail is displayed in the lower right corner for a few seconds and it disappears.\nIf you click this thumbnail, you will be able to annotate the screenshot but if you want to do any meaningful changes to it, like changing the name, you have to open it with the QuickView tool. Using this app, you can change the default name and select the directory to save it.\nWhen you are writing a long form document or any document to be edited later by a third party, keeping all files named the same with a timestamp makes it harder. If you need to fix a broken image or retake one of those is much more simpler to locate \u0026lsquo;spyder-help-menu.png\u0026rsquo; than \u0026lsquo;captura de pantalla 2022-02-18 a las 11:00\u0026rsquo;. If you need to process dozens of images and/or need to attribute licensing terms, it suddenly becomes so time consuming.\nUsing those images for the blog could work in theory, but SEO won\u0026rsquo;t be happy if all the images in all your posts are called \u0026lsquo;captura de pantalla 20xx-01-01 10:xx\u0026rsquo; regardless of the topic. By default, Hugo stores all the images in a single folder, which can make it also hard to maintain.\nFocusing on our blog workflow, the simple steps are not so simple or fast anymore. For every single image, now you have to:\n Run a shortcut to capture an area of your screen. Click the thumbnail really fast. Edit any content on the image if necesary Press Cmd+S to save the image Select the directory where you store your blog images Check if there is a folder named under the name of the blog post you are creating Select the folder or create it if it doesn\u0026rsquo;t exist Select an appropiate name for the image Press save Open the folder again in Finder Select the file, click the name and copy the complete name. Return to your text editor Insert the markdown code to insert an image Paste the image name in the center of the brackets Write an alt description for the image  There must be a better way to do it!\nExploring the solution with Windows I am using a desktop app called ShareX that has all kinds of bells and whistles to capture and transform parts of the screen. It can create animated GIFs, short videos, plain captures, annotations. These can be automatically copied to folders, uploaded to the cloud, renamed, etc. But how does it integrate with my editor vscode? It doesn\u0026rsquo;t.\nI started looking for solutions and found the Paste Image extension for VsCode. With this extension, the process is much more simple!\n Launch the capture window action for ShareX (This step copies the image to the clipboard too) Switch to vscode Select a text as image title. Press Ctrl+Alt+V (A markdown link is copied into the text. Image is pasted into the working directory)  This solution seems quite promising! However, it has some initial problems:\n Images are saved to the same directory as the blogposts Images are named as YYYY-MM-DD-hh-mm.png Image route gets urlEncoded with %20 instead of spaces, dificulting readability.  Fortunately, this extension offers some parameters to change this behavior. You can customize it at the settings.json file or File-\u0026gt; Preferences.\nIn my case, I changed the Path to save the images in a folder named as the blogpost, under the Hugo static images route. I also made the extension ask me for a filename before saving it to disk. This is my settings.json configuration for Paste Image:\n\u0026#34;pasteImage.path\u0026#34;: \u0026#34;${projectRoot}/assets/images/post/${currentFileNameWithoutExt}\u0026#34;, \u0026#34;pasteImage.basePath\u0026#34;: \u0026#34;${projectRoot}/assets/\u0026#34;, \u0026#34;pasteImage.showFilePathConfirmInputBox\u0026#34;: true, \u0026#34;pasteImage.filePathConfirmInputBoxMode\u0026#34;: \u0026#34;onlyName\u0026#34; Did everything work? Nope! Now the images do not appear on vscode preview window. There are some old issues related to a similar problem. However the workflow is much more simpler now.\nI just need to hightlight some text, press Ctrl+Shift+4. Captured area is copied to clipboard. I switch to vscode, press Ctrl+Alt+Vand vscode prompts to change the file name. Now I just need to replace spaces for hyphens and file gets saved to the right location.\nNote: For a detailed description of ShareX and integration with different workflows, you can check this ShareX-User-Manual\nImprovements This workflow suits my needs to create blog posts, but what about other long form formats? I need to test this workflow in more detail to see if it would be suitable too.\nOn the other hand, there are still a few issues that could be improved:\n When you mark a text to be used as image filename, the text disappears when vscode pastes the markdown code. So you have to write the text again. I need to replace manually the spaces in the text for hypens, to prevent vscode from saving the images with spaces in the filenames.  That is, If I hightlight the Test image words in my text and press Ctrl+Alt+V I get a dialog where I have to manually change the file name to Test-image and the original text gets replaced by a link like this:\n![](images/post/meta-editing-problems/Test-image.png) So I have to move between brackets to copy again the original string again, so it ends up looking like this:\n![Test Image](images/post/meta-editing-problems/Test-image.png) Code for the extension is available on Github but seems unmaintained. There is a fork that seems to be active, but adds additional requirements for all operating systems. One of the longest opened issues is about extension not working in Windows 10.\nThe MarkdownPaste.Rules section could help with replacing the spaces with hypens. But then I would need to explore RegEx in Typescript. Configuration options seem mostly compatible with minor changes.\nHow much time do these tasks take vs the time it will save me down the road? I have just spent three hours configuring and writing this post. Let\u0026rsquo;s add a couple more to test Hugo publishing\u0026hellip; I might need to double check the XKCD matrix :)\nPhoto by Daniele Franchi on Unsplash\n","date":"February 18, 2022","image":"https://elsatch.github.io/images/post/meta-editing-problems/meta-editing-problems_huf30791e25402d48bf1d47c2f65eadfc4_369715_650x0_resize_box_3.png","permalink":"/blog/meta-editing-problems/","title":"Meta editing problems... again"},{"categories":["hugo"],"contents":"Introduction I have choosen Geeky Hugo as the theme for this site. I forked the original repo to my Github account. Then I wanted to add support for Mermaid Diagramms. So I added Mermaid as a Hugo module and added a shortcode file for Mermaid in the theme directory. Then hell broke lose a few commits afterwards!\nWhat do you mean loading a Hugo theme as a Hugo module If you check Hugo documentation, you will discover that most themes include some lines about adding the Hugo theme as a submodule. That is: you will clone the repo under the themes folder and register it as a git submodule. In this way, you will be able to update your theme easily fetching the changes upstream.\nI tried this setup, using vscode as editor. I started editing in a couple of machines and started getting errors about theme version mismatch when loading submodules. I tried getting updates, syncing the changes across but that failed too.\nTwo weeks ago, I found an article explaining that you can register your theme as a Hugo module instead of as a git submodule. In that way, when Hugo builds the site, it loads all registered Hugo modules automatically and you don\u0026rsquo;t have to deal with submodules. It was pure Hugo bliss\u0026hellip;not.\nError building the site I registered my theme Geeky-Hugo as Hugo module. Then I changed my config.toml to comment the theme line and add the module line. Everything should work perfectly.\nAs I tried to build my site, I got this error both in my local computer and on the Github Actions build log:\nRun hugo --minify 4 hugo: downloading modules … 5 hugo: collected modules in 25224 ms 6 Start building sites … 7 hugo v0.91.2-1798BD3F+extended linux/amd64 BuildDate=2021-12-23T15:33:34Z VendorInfo=gohugoio 8 ERROR 2022/02/19 22:15:26 render of \u0026#34;page\u0026#34; failed: execute of template failed: template: _default/contact.html:18:4: executing \u0026#34;_default/contact.html\u0026#34; at \u0026lt;partialCached \u0026#34;style.html\u0026#34; .\u0026gt;: error calling partialCached: \u0026#34;/tmp/hugo_cache/modules/filecache/modules/pkg/mod/github.com/elsatch/geeky-hugo@v0.0.0-20220219095841-700f69e277aa/layouts/partials/style.html:30:33\u0026#34;: execute of template failed: template: partials/style.html:30:33: executing \u0026#34;partials/style.html\u0026#34; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026#34;text/x-scss\u0026#34; and \u0026#34;text/css\u0026#34; 9 ERROR 2022/02/19 22:15:26 render of \u0026#34;page\u0026#34; failed: execute of template failed: template: _default/single.html:18:4: executing \u0026#34;_default/single.html\u0026#34; at \u0026lt;partialCached \u0026#34;style.html\u0026#34; .\u0026gt;: error calling partialCached: \u0026#34;/tmp/hugo_cache/modules/filecache/modules/pkg/mod/github.com/elsatch/geeky-hugo@v0.0.0-20220219095841-700f69e277aa/layouts/partials/style.html:30:33\u0026#34;: execute of template failed: template: partials/style.html:30:33: executing \u0026#34;partials/style.html\u0026#34; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026#34;text/x-scss\u0026#34; and \u0026#34;text/css\u0026#34; 10 ERROR 2022/02/19 22:15:26 render of \u0026#34;page\u0026#34; failed: execute of template failed: template: _default/search.html:18:4: executing \u0026#34;_default/search.html\u0026#34; at \u0026lt;partialCached \u0026#34;style.html\u0026#34; .\u0026gt;: error calling partialCached: \u0026#34;/tmp/hugo_cache/modules/filecache/modules/pkg/mod/github.com/elsatch/geeky-hugo@v0.0.0-20220219095841-700f69e277aa/layouts/partials/style.html:30:33\u0026#34;: execute of template failed: template: partials/style.html:30:33: executing \u0026#34;partials/style.html\u0026#34; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026#34;text/x-scss\u0026#34; and \u0026#34;text/css\u0026#34; 11 ERROR 2022/02/19 22:15:26 render of \u0026#34;page\u0026#34; failed: execute of template failed: template: _default/single.html:18:4: executing \u0026#34;_default/single.html\u0026#34; at \u0026lt;partialCached \u0026#34;style.html\u0026#34; .\u0026gt;: error calling partialCached: \u0026#34;/tmp/hugo_cache/modules/filecache/modules/pkg/mod/github.com/elsatch/geeky-hugo@v0.0.0-20220219095841-700f69e277aa/layouts/partials/style.html:30:33\u0026#34;: execute of template failed: template: partials/style.html:30:33: executing \u0026#34;partials/style.html\u0026#34; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026#34;text/x-scss\u0026#34; and \u0026#34;text/css\u0026#34; 12 ERROR 2022/02/19 22:15:26 failed to render pages: render of \u0026#34;page\u0026#34; failed: execute of template failed: template: _default/about.html:18:4: executing \u0026#34;_default/about.html\u0026#34; at \u0026lt;partialCached \u0026#34;style.html\u0026#34; .\u0026gt;: error calling partialCached: \u0026#34;/tmp/hugo_cache/modules/filecache/modules/pkg/mod/github.com/elsatch/geeky-hugo@v0.0.0-20220219095841-700f69e277aa/layouts/partials/style.html:30:33\u0026#34;: execute of template failed: template: partials/style.html:30:33: executing \u0026#34;partials/style.html\u0026#34; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026#34;text/x-scss\u0026#34; and \u0026#34;text/css\u0026#34; 13 Error: Error building site: TOCSS: failed to transform \u0026#34;style.scss\u0026#34; (text/x-scss): SCSS processing failed: file \u0026#34;/tmp/hugo_cache/modules/filecache/modules/pkg/mod/github.com/elsatch/geeky-hugo@v0.0.0-20220219095841-700f69e277aa/assets/scss/bootstrap/_mixins.scss\u0026#34;, line 6, col 1: File to import not found or unreadable: vendor/rfs. 14 Total in 25290 ms 15 Error: Process completed with exit code 255. As I searched for this error, I stumbled upon multiple suggestions about using Hugo Extended version to get the SCSS files processed. I am using Hugo 0.92.1 Extended version, so that should not be an issue.\nThen I focused on the last line, as it was the one that differed from other error logs I have seen online. It says: File to import not found or unreadable: vendor/rfs..\nFortunately, I found an issue related to this problem. @bep, one of Hugo project leaders explained in that thread:\nOK, so the problem is a bug in Go. I have reported it upstream and I assume it will get priority, but one never knows. In Go Modules, the top-level /vendor directory in a module has a special meaning, so they delete it from the bundle after downloading. Sadly, their regexp (or whatever) is a little aggressive, so this folder goes as well: https://github.com/twbs/bootstrap/tree/master/scss/vendor Note that if you mount that folder from the project itself, you will not experience this. There may be other workarounds until this gets fixed upstream, but you would do me a solid if you could rename this folder to something else (vendors, _vendor... whatever). Ok, so that is the root cause. From what I understand, as the Go program is building your Hugo website, it cleans up afterwards any folders named vendor. Some of the files used by Bootstrap are saved in a folder called vendor, that gets deleted afterwards. When the main program tries to process the scss files, there are some components missing and it fails. This only happens with Go/Hugo Modules, so if you store the files locally, the error will disappear, but we will go back to the previous scenario.\nPossible fix In the thread, they point to a potential fix. It is a Hugo module called hugo-mod-bootstrap-css that bundles Bootstrap V4 and V5 components, that should fix the problem. To use it, you have to add in your config file the following lines:\n[module] [[module.imports]] path = \u0026#34;github.com/gohugoio/hugo-mod-bootstrap-scss/v5\u0026#34; Realtime test If you can see this line, this fix solves the problem of Geeky Hugo (and other Bootstrap enabled) themes in Hugo, when loaded as a Hugo module.\n","date":"February 9, 2022","image":"https://elsatch.github.io/images/post/meta-editing-problems/meta-editing-problems_huf30791e25402d48bf1d47c2f65eadfc4_369715_650x0_resize_box_3.png","permalink":"/blog/error-using-hugo-theme-as-a-module/","title":"Error building my web when using Hugo Theme as a Hugo Module"},{"categories":["python","organize-tool"],"contents":"Current structure graph LR; id1([Local file]) id2([Local NAS]) id3([Google Drive]) id1 -- id2; id1 -- id3;  Semi automated processes Sorting my pictures\nInteractive disk organization Exploring from terminal\nPhoto credits: Photo by Sharon McCutcheon on Unsplash\n","date":"February 9, 2022","image":"https://elsatch.github.io/images/post/organize-use-cases_huc75469fe2e31d535557ef233b35dae4a_343517_650x0_resize_box_3.png","permalink":"/blog/my-organize-use-cases/","title":"My Organize tool use cases"},{"categories":["python","organize-tool"],"contents":"Organize is a command line python utility that helps you organize your files based on rules. It is created by Thomas Feldmann and it\u0026rsquo;s available from his github repository. Yesterday, version 2.0 of the tool was launched. As I was reading all new features on the changelog, I began to reflect on my current use cases plus all the new options to explore.\nIt is my goal to use organize as much as possible to help me:\n Sorting all my pictures and folders Arranging paper and digital invoices and expenses Creating more robust backups Migrating all my files from Dropbox to Google Drive/local NAS  Note: In this article, we will be using the new Organize v2 syntax. Please refer to this guide if you want to know the differences from the v1 syntax.\nHow does organize work? Organize is a command line program that can be installed from pip/git/brew.\nOnce installed you can execute it from your terminal (or powershell window). The program reads the rules to process from a file, known as the organize config file. You can edit the rules executing:\norganize edit By default, this will open vim to edit the file, but you can use any text editor. This file\u0026rsquo;s format is in YAML\nConfiguration file is based upon the following elements:\n Rules Locations Filters Actions  So each rule can target to one or more locations (folders), filtering the results in several ways and applying the actions for the filtered results. When we run organize, it will read the config file and execute the rules in the given order. Given they are the building blocks of our file organization strategy, let\u0026rsquo;s explore these rules in more detail.\nSample rules for organizing files There are countless ways to organize your files. Maybe you sort your files by project or by date. Maybe you prefer to rename files or tag them using macsosx built-in features. Organize rules are super flexible, trying to accommodate all kinds of scenarios.\nBefore we dive into the actual rules, let\u0026rsquo;s describe some sorting mechanisms in plain words. For example:\n All my installation files in the download folder that are older than three months should be deleted All my photos in my computer should be renamed to include the date and the model of the camara that was used to take the shoots. All my invoices in project folders and pdf format should be copied into the fiscal_information folder, sorted by quarter, based on the content of the invoice. All my raw videos in the published folder should be copied to Dropbox and Google Drive for archival.  These rules can be easily replicated in Organize, using the four elements outlined in the previous section.\nAs an example, let\u0026rsquo;s share one sample rule configuration. This rule will move all files from the Desktop folder, older than 30 days, to a folder called old_items:\n# Sample organize configuration rules: - name: Move files on desktop older than 30 days to old_items locations: \u0026#34;~/Desktop\u0026#34; filters: - created: days: 30 actions: - move: \u0026#34;~/Desktop/old_items\u0026#34; Organize command-line operations YAML files can be hard to create right without the proper editor. Fortunately, you can verify your config file by running:\norganize check Organize can be executed in simulation mode to verify if the rules would affect the expected files and folders. It will also return the results of the different actions, but without altering your files in any way. To run organize in simulation mode run:\norganize sim Once you are happy about the results, you can just process the rules doing:\norganize run You will see in the console all different operations happening in real time, until all rules are processed for the target locations.\nInitial thoughts about Organize When I first encountered organize, it looked like the perfect tool to automate renaming and moving files inside my computer. Then I started creating the rules and simulating them. So it looked like a tool for interactive sessions. Initially, it made no sense. But the more I used it, the more it grew on me.\nWith version 2, Organize can fulfill even more roles in my systems. In these series of articles, I plan to explore the multiple use cases for the tool, offering sample configurations and new uses that where not possible in previous versions.\nPhoto credits: Photo by Erol Ahmed on Unsplash.\n","date":"February 8, 2022","image":"https://elsatch.github.io/images/post/introduction-organize-tool_hu8f64c5febe8d477323813b82223057ec_3507452_650x0_resize_box_3.png","permalink":"/blog/introduction-to-organize-tool/","title":"Introduction to Organize tool"},{"categories":["thoughts"],"contents":"Introduction January 2022. A new year starts, inmersed in COVID-19 pandemic. It\u0026rsquo;s that time of the year when everyone sets new goals and starts new projects. In my case, that would mean envisioning another couple of new inititives, with their own branding, blogs, social media, etc. But this year will be different for me!\nLaunching a blog One of my goals for this year is to focus on Python for data science and data engineering. Initially, I don\u0026rsquo;t plan to apply this knowledge to search for an external job, but to incorporate it into my daily practice.\nFor the last six or seven years, I have run La Hora Maker podcast and Youtube channel. When you publish content regularly about a topic, people expect you to keep on moving forward under that topic umbrella. Does Python fit into La Hora Maker audience? Does data science fit? Opendata?\nAs I started exploring the data engineering lanscape, I realized there are so many interesting projects using Python. All the contents and repositories are mainly in English. All interactions around the topic are in English.\nI want to join the conversation and share my insights, questions, a-ha moments with other practitioners. Instead of launching some kind of \u0026ldquo;Data Engineering Mastered\u0026rdquo; blog, I opted for a smaller, more humble approach.\nMost of the conversation nowadays is happening in Github, so I am launching a simple page in English using Github pages. I will use Hugo and a simple theme to start and keep growing from there. I don\u0026rsquo;t expect it to become massive but mostly a personal journal of sorts. At least, I hope it will simplify dumping ideas about data and tech on the Internet :)\nPhoto by Markus Spiske on Unsplash.\n","date":"February 7, 2022","image":"https://elsatch.github.io/images/post/launching-blog-2022_hu7d6bde8b9d7510d626361d118f92c933_2354890_650x0_resize_box_3.png","permalink":"/blog/launching-a-blog-in-2022/","title":"Launching a blog in 2022"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi amet, ultrices scelerisue cras. Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsum lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis rutrum elit vestibululm ipsum. Arcu fringilla duis vitae mos dsdllis duicras interdum purus cursus massa metus. Acc umsan felaais, egsdvet nisi, viverra turpis fermentum sit suspf bafedfb ndisse fermentum consectetur. Facilisis feugiat trisique orci tempor sed masd fbsssa tristique ultrices sodales. Augue est sapien elementum facilisis. Enim tincidnt cras interdum purus ndisse. morbi quis nunc.\nEt dolor placerat tempus risus nunc urna, nunc a. Mattis viverra ut sapidaaen enim sed tortor. Mattis gravida fusce cras interdum purus cursus massa metus. Acc umsan felaais, eget nisi, viverra turpis fermentum sit suspf bafedfb ndisse. morbi quis nunc, at arcu quam facilisi. In in lacus aliquam dictum sagittis morbi odio. Et magnis cursus sem sed condimentum. Nibh non potenti ac amsdfet Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsuasdm lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis ndisse. morbi quis nunc, at arcu quam facilisi ndisse. morbi quis nunc, at arcu quam facilisi\n","date":"January 1, 1","image":"https://elsatch.github.io/images/author_huc52b74d0e3cb7598517268ee329c8e5f_1311737_650x0_resize_box_3.png","permalink":"/about/","title":"About The Author"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://elsatch.github.io/images/author_huc52b74d0e3cb7598517268ee329c8e5f_1311737_650x0_resize_box_3.png","permalink":"/contact/","title":"Let's, Talk About You"},{"categories":null,"contents":"Privacy Policy Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi amet, ultrices scelerisue cras. Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsum lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis rutrum elit vestibululm ipsum. Arcu fringilla duis vitae mos dsdllis duicras interdum purus cursus massa metus. Acc umsan felaais, egsdvet nisi, viverra turpis fermentum sit suspf bafedfb ndisse fermentum consectetur. Facilisis feugiat trisique orci tempor sed masd fbsssa tristique ultrices sodales. Augue est sapien elementum facilisis. Enim tincidnt cras interdum purus ndisse. morbi quis nunc.\nMore Privacy Policy Et dolor placerat tempus risus nunc urna, nunc a. Mattis viverra ut sapidaaen enim sed tortor. Mattis gravida fusce cras interdum purus cursus massa metus. Acc umsan felaais, eget nisi, viverra turpis fermentum sit suspf bafedfb ndisse. morbi quis nunc, at arcu quam facilisi. In in lacus aliquam dictum sagittis morbi odio. Et magnis cursus sem sed condimentum. Nibh non potenti ac amsdfet Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsuasdm lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis ndisse. morbi quis nunc, at arcu quam facilisi ndisse. morbi quis nunc, at arcu quam facilisi\nEt dolor placerat tempus risus nunc urna, nunc a. Mattis viverra ut sapidaaen enim sed tortor. Mattis gravida fusce cras interdum purus cursus massa metus. Acc umsan felaais, eget nisi, viverra turpis fermentum sit suspf bafedfb ndisse. morbi quis nunc, at arcu quam facilisi. In in lacus aliquam dictum sagittis morbi odio. Et magnis cursus sem sed condimentum. Nibh non potenti ac amsdfet Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsuasdm lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis ndisse. morbi quis nunc, at arcu quam facilisi ndisse. morbi quis nunc, at arcu quam facilisi\n","date":"January 1, 1","image":"https://elsatch.github.io/images/author_huc52b74d0e3cb7598517268ee329c8e5f_1311737_650x0_resize_box_3.png","permalink":"/privacy-policy/","title":"Privacy Policy"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://elsatch.github.io/images/author_huc52b74d0e3cb7598517268ee329c8e5f_1311737_650x0_resize_box_3.png","permalink":"/search/","title":"Search Result"}]